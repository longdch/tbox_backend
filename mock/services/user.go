// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/user.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIUserService is a mock of IUserService interface
type MockIUserService struct {
	ctrl     *gomock.Controller
	recorder *MockIUserServiceMockRecorder
}

// MockIUserServiceMockRecorder is the mock recorder for MockIUserService
type MockIUserServiceMockRecorder struct {
	mock *MockIUserService
}

// NewMockIUserService creates a new mock instance
func NewMockIUserService(ctrl *gomock.Controller) *MockIUserService {
	mock := &MockIUserService{ctrl: ctrl}
	mock.recorder = &MockIUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIUserService) EXPECT() *MockIUserServiceMockRecorder {
	return m.recorder
}

// GenerateOtp mocks base method
func (m *MockIUserService) GenerateOtp(phoneNumber string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateOtp", phoneNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateOtp indicates an expected call of GenerateOtp
func (mr *MockIUserServiceMockRecorder) GenerateOtp(phoneNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateOtp", reflect.TypeOf((*MockIUserService)(nil).GenerateOtp), phoneNumber)
}

// ResendOtp mocks base method
func (m *MockIUserService) ResendOtp(phoneNumber string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResendOtp", phoneNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResendOtp indicates an expected call of ResendOtp
func (mr *MockIUserServiceMockRecorder) ResendOtp(phoneNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResendOtp", reflect.TypeOf((*MockIUserService)(nil).ResendOtp), phoneNumber)
}

// Login mocks base method
func (m *MockIUserService) Login(phoneNumber, otp string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", phoneNumber, otp)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login
func (mr *MockIUserServiceMockRecorder) Login(phoneNumber, otp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockIUserService)(nil).Login), phoneNumber, otp)
}
