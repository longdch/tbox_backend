// Code generated by MockGen. DO NOT EDIT.
// Source: internal/stores/user.go

// Package mock_stores is a generated GoMock package.
package mock_stores

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	dto "tbox_backend/internal/dto"
)

// MockIUserStore is a mock of IUserStore interface
type MockIUserStore struct {
	ctrl     *gomock.Controller
	recorder *MockIUserStoreMockRecorder
}

// MockIUserStoreMockRecorder is the mock recorder for MockIUserStore
type MockIUserStoreMockRecorder struct {
	mock *MockIUserStore
}

// NewMockIUserStore creates a new mock instance
func NewMockIUserStore(ctrl *gomock.Controller) *MockIUserStore {
	mock := &MockIUserStore{ctrl: ctrl}
	mock.recorder = &MockIUserStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIUserStore) EXPECT() *MockIUserStoreMockRecorder {
	return m.recorder
}

// GetByPhoneNumber mocks base method
func (m *MockIUserStore) GetByPhoneNumber(phoneNo string) (*dto.User, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPhoneNumber", phoneNo)
	ret0, _ := ret[0].(*dto.User)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByPhoneNumber indicates an expected call of GetByPhoneNumber
func (mr *MockIUserStoreMockRecorder) GetByPhoneNumber(phoneNo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPhoneNumber", reflect.TypeOf((*MockIUserStore)(nil).GetByPhoneNumber), phoneNo)
}

// Save mocks base method
func (m *MockIUserStore) Save(user *dto.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockIUserStoreMockRecorder) Save(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIUserStore)(nil).Save), user)
}

// UpdateStatus mocks base method
func (m *MockIUserStore) UpdateStatus(user *dto.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus
func (mr *MockIUserStoreMockRecorder) UpdateStatus(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockIUserStore)(nil).UpdateStatus), user)
}
